#include <uf.h>
#include <uf_ui.h>
#include <uf_obj.h>
#include <uf_curve.h>
#include <uf_csys.h>
#include <uf_modl.h>

char a[] = "0.0";
char b[] = "0.7";
char t_a[] = "0.0";
char c[] = "0.7";
char d[] = "-0.0";

void createArc(double centerX, double centerY, double centerZ, double radius, tag_t* arc_id)
{
    UF_CURVE_arc_t arc_coords;
    arc_coords.start_angle = 0.0;
    arc_coords.end_angle = 360.0 * DEGRA;
    arc_coords.arc_center[0] = centerX;
    arc_coords.arc_center[1] = centerY;
    arc_coords.arc_center[2] = centerZ;
    arc_coords.radius = radius;

    UF_CURVE_create_arc(&arc_coords, arc_id);
}


void ufusr(char* param, int* retcode, int param_len) {

    UF_CURVE_arc_t arc1, arc2, arc3, arc4, arc5, arc6, arc7, arc8;
    tag_t arc_id1, arc_id2, arc_id3, arc_id4, arc_id5, arc_id6, arc_id7, arc_id8;
    tag_t wcs_tag, body_tag;
    char* limit[2] = { a, b };
    char* limit1[2] = { c, d };
    double direction[3] = { 0.0, 0.0, 1.0 };
    UF_FEATURE_SIGN create = UF_NULLSIGN;
    uf_list_p_t loop_list, features;
    char* taper_angle = t_a;
    double ref_pt[3];

    if (!UF_initialize()) {
        // Создаем первые две окружности
        arc1.start_angle = 0.0;
        arc1.end_angle = 360.0 * DEGRA;
        arc1.arc_center[0] = 0;
        arc1.arc_center[1] = 0;
        arc1.arc_center[2] = 0;
        arc1.radius = 51;

        arc2.start_angle = 0.0;
        arc2.end_angle = 360.0 * DEGRA;
        arc2.arc_center[0] = 0;
        arc2.arc_center[1] = 0;
        arc2.arc_center[2] = 0;
        arc2.radius = 70;

        // Создаем следующие четыре окружности
        arc3.start_angle = 0.0;
        arc3.end_angle = 360.0 * DEGRA;
        arc3.arc_center[0] = 60;
        arc3.arc_center[1] = 0;
        arc3.arc_center[2] = 0;
        arc3.radius = 5;

        arc4.start_angle = 0.0;
        arc4.end_angle = 360.0 * DEGRA;
        arc4.arc_center[0] = -60;
        arc4.arc_center[1] = 0;
        arc4.arc_center[2] = 0;
        arc4.radius = 5;

        arc5.start_angle = 0.0;
        arc5.end_angle = 360.0 * DEGRA;
        arc5.arc_center[0] = 0;
        arc5.arc_center[1] = 60;
        arc5.arc_center[2] = 0;
        arc5.radius = 5;

        arc6.start_angle = 0.0;
        arc6.end_angle = 360.0 * DEGRA;
        arc6.arc_center[0] = 0;
        arc6.arc_center[1] = -60;
        arc6.arc_center[2] = 0;
        arc6.radius = 5;

        UF_CSYS_ask_wcs(&wcs_tag);
        UF_CSYS_ask_matrix_of_object(wcs_tag, &arc1.matrix_tag);
        UF_CSYS_ask_matrix_of_object(wcs_tag, &arc2.matrix_tag);
        UF_CSYS_ask_matrix_of_object(wcs_tag, &arc3.matrix_tag);
        UF_CSYS_ask_matrix_of_object(wcs_tag, &arc4.matrix_tag);
        UF_CSYS_ask_matrix_of_object(wcs_tag, &arc5.matrix_tag);
        UF_CSYS_ask_matrix_of_object(wcs_tag, &arc6.matrix_tag);

        // Создаем все восемь окружностей
        UF_CURVE_create_arc(&arc1, &arc_id1);
        UF_CURVE_create_arc(&arc2, &arc_id2);
        UF_CURVE_create_arc(&arc3, &arc_id3);
        UF_CURVE_create_arc(&arc4, &arc_id4);
        UF_CURVE_create_arc(&arc5, &arc_id5);
        UF_CURVE_create_arc(&arc6, &arc_id6);

        // Опционально устанавливаем параметры выдавливания
        UF_MODL_create_list(&loop_list);
        UF_MODL_put_list_item(loop_list, arc_id2);
        UF_MODL_put_list_item(loop_list, arc_id1);
        UF_MODL_put_list_item(loop_list, arc_id3);
        UF_MODL_put_list_item(loop_list, arc_id4);
        UF_MODL_put_list_item(loop_list, arc_id5);
        UF_MODL_put_list_item(loop_list, arc_id6);

        // Создаем выдавливание
        UF_MODL_create_extruded(loop_list, taper_angle, limit1, ref_pt, direction, create, &features);

        UF_terminate();
    }
}
